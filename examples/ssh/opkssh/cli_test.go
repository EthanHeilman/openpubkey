package main

import (
	"crypto/ecdsa"
	"testing"

	"github.com/openpubkey/openpubkey/examples/ssh/sshcert"
	"github.com/openpubkey/openpubkey/parties"
)

var (
	userArg    = "e0"
	typeArg    = "ecdsa-sha2-nistp256-cert-v01@openssh.com"
	certB64Arg = "AAAAKGVjZHNhLXNoYTItbmlzdHAyNTYtY2VydC12MDFAb3BlbnNzaC5jb20AAAAgL6BN+ATicXhmXoLG4nOiCff3FU35ciWUj4setOM/i90AAAAIbmlzdHAyNTYAAABBBMSEk2pEw+7r2g3Yj/SjJ0fKEsnsBumpn6fmh0bTT0Jai03biXxjisdPN5hHlpa2G6LskYSEu//Vjx+Ul9r5GCUAAAAAAAAAAAAAAAEAAAAeYW5vbi5hdXRob3IuYWFyZHZhcmtAZ21haWwuY29tAAAADgAAAAJlMAAAAAR0ZXN0AAAAAAAAAAD//////////wAAAAAAAAnoAAAADm9wZW5wdWJrZXktcGt0AAAJUAAACUxleUp3WVhsc2IyRmtJam9pWlhsS2NHTXpUV2xQYVVwdlpFaFNkMk42YjNaTU1rWnFXVEk1TVdKdVVucE1iV1IyWWpKa2MxcFROV3BpTWpCcFRFTkthR1Z1UVdsUGFVbDRUMFJSTlU1cVozaE5lbWMxVFhwbmRGcDZSbTFhUjFKelRsaFNibUpIT0ROaVZ6VnpXVzFTYUdGNmFHOVpiazU0WVVkb2JVNTZiRzFOZWtsMVdWaENkMk41Tlc1aU1qbHVZa2RXTVdNeVZubFpNamwxWkVkV2RXUkROV3BpTWpCcFRFTkthR1JYVVdsUGFVbDRUMFJSTlU1cVozaE5lbWMxVFhwbmRGcDZSbTFhUjFKelRsaFNibUpIT0ROaVZ6VnpXVzFTYUdGNmFHOVpiazU0WVVkb2JVNTZiRzFOZWtsMVdWaENkMk41Tlc1aU1qbHVZa2RXTVdNeVZubFpNamwxWkVkV2RXUkROV3BpTWpCcFRFTktlbVJYU1dsUGFVbDRUVVJSTkU1VVNYZE5SRWt3VGtSUk0wNVVVWGhOZWxsNVRucEZhVXhEU214aVYwWndZa05KTmtsdFJuVmlNalIxV1ZoV01HRkhPWGxNYlVab1kyMVNNbGxZU25KUlIyUjBXVmRzYzB4dFRuWmlVMGx6U1cxV2RGbFhiSE5ZTTFwc1kyMXNiV0ZYVm10SmFuQXdZMjVXYkV4RFNtaGtSamx2V1ZoT2IwbHFiMmxYVkVaTVdXNWtSRk42UmpGVE1IQnVXVzFzTUZKWFVURk5iR1J0V25sSmMwbHROWFppYlU1c1NXcHZhVk13V2tsTk0yeGFWSGwwZVU1SGFGSkxNRGxKVkRKR1EwMHhUbUZaYlRVelRUSlNUR0ZYYUdoV1ZrSlpVbTA1TkZaVVZrVldibXd6VFVOSmMwbHROV2hpVjFWcFQybEtRbUp0T1hWbFZ6RjJaRmhOWjFGWVZqQmhSemw1U1dsM2FXTkhiR3BrU0ZaNVdsTkpOa2x0YURCa1NFSjZUMms0ZG1KSFozcE1iV1IyWWpKa2MxcFlWbnBhV0VwcVlqSTFNRnBYTlRCTWJVNTJZbE01YUV3d1JrUmFlbWgyV1RCd2FsWkdWak5TYTFKRFdERmtSRXhVWkU1Uk1uTXlUbFJTYkZKSVVtRldiVFY0Wkd0a05tVnFiRk5VVXpGV1VqRnNjRTVJVmpWT01qRnVVRmhOTlU1cE1XcEphWGRwV2pKc01scFhOV1ppYlVaMFdsTkpOa2xyUm5WaU1qVTFZbGM1TVdONVNYTkpiVnBvWWxkc2MyVldPWFZaVnpGc1NXcHZhVkZZVmpCaFJ6bDVTV2wzYVdKSE9XcFpWM2hzU1dwdmFWcFhOR2xNUTBwd1dWaFJhVTlxUlRKUFZHTXlUbnBSTTAxRVVYTkpiVlkwWTBOSk5rMVVXVFZPZWxrelQwUk5kMDVJTUNJc0luTnBaMjVoZEhWeVpYTWlPbHQ3SW5CeWIzUmxZM1JsWkNJNkltVjVTbWhpUjJOcFQybEtSbFY2U1RGT2FVbHpTVzVLTmtscWIybE9WMUV4VDFSQ2JVMUhVbWhhYWtsNlRrZFJlVTVFWXpGT1ZHTXdUbFJXYTA0eVJtdFBSMVV4VGpKSk5WcHRSWGxQUjFwc1RrUmFiRTVVUW14YVZFMTZXbGRaTVU5RVdUSmFhbHBxV1hwbmVGcHFVWGxPUTBselNXNVdkMkY1U1RabGVVcHFZMjVaYVU5cFNsRk1WRWt4VG1sSmMwbHRkREJsVTBrMlNXdFdSRWxwZDJsbFEwazJTVzVvU2xVeFVtaGhNVkpGVGpOV01sbFZVbXRoVmtFMVV6QXhkVlZxYUhaVk0yeHNaREJqTWxsWE1XMWpRekZvVTBaS01GUnNRbEppUnpocFRFTktOVWxxYjJsaFZFRjZXVzFzV1dWSGNIQmpNbEpSVkdwV2IxTkhlSGRaVkVwSVRtdDRlbUV4YkZSU1dGWm1XREZhY1dWRE1WWmlSR3g1VGxWa1JGWlRTamxtVVNJc0ltaGxZV1JsY2lJNmV5SnphV2RmZEhsd1pTSTZJbU5wWXlKOUxDSnphV2R1WVhSMWNtVWlPaUl0VlhObVZXbDRZWFIzVUVrdFRVOTZWVnBuYmxreGFUWXdSR2MwZFZKT1ZuSjFlRmRaZFU5WVltWjBiRE53VFdkWmFWTkxRa2swUlRCc2JqUjFkR0V0VVV4WlVHUmlVM1ZxVG5OTFJteHNZVUphY21kNGR5SjlMSHNpY0hKdmRHVmpkR1ZrSWpvaVpYbEthR0pIWTJsUGFVcFRWWHBKTVU1cFNYTkpiWFJ3V2tOSk5rbHFaR3ROZWswd1RrUnJNMDVVUVRKWlYwNXBUbnBTYWxwSFZteGFSMFpvVG1wWmVFOUVVbXROVkZVeFRrUmtiVTlFVFRKUFZFMXBURU5LTUdWWVFXbFBhVXBMVmpGUmFXWlJJaXdpYUdWaFpHVnlJanA3SW5OcFoxOTBlWEJsSWpvaWIybGtZeUo5TENKemFXZHVZWFIxY21VaU9pSlJNbU5GYzB4VmEzTnllbll3YkhOcGF6SndhVlF3WVd4UGIxZFpXRzlDUW1FM2MzaEJVRXAyTW1WamRYWlBOa054UnpGQ2RFaDFSbTAzTFRRMGFYTTJZWGhvUmt4RFZHNHlSbll4WjFsck5HeHdkR0ZJUVZwU1RHODBUR3RFU21SbWNEbDVUVzluV0hCSmR6bFZOMDFDVjFsbE5sUkpWRUZQUlhwWE9HdFBkbk55UzNwcGQxUm1ia1JXYVRNeE9ERnlZbVY2TVUxeWRrNWFlRFpYUW1SWUxXcDFaMHRRZW1aelp6ZGZkSFpuTjNFd2FteHVSMEoyYm5wS1NsQnVXV0ZHVlRGSU1HNUdObU4yUzJ4Uk0xVkRjVU16VUhjNVJsRjVkbVZRUldKR1FtMVRlVmR2TlhWUFEwSjJhWFZDZEUxWGRGTXpjMUZaVm10UVNXTlBVVWxrTjJSSGFsWlljRTl4VlVoWVVqZG9iRVI0TVhaeVlrUm9PVUl5VTJ4cmNHUTNRbnBoUkRNMkxUTkNOVmRTTm01YVdVbFdPVUpYVlRKVldYVktaMnRQTldsWFdFWk5NMmxoWW1kUU5rdHdOWFpRUVZkU1pGRWlmVjE5AAAAFXBlcm1pdC1YMTEtZm9yd2FyZGluZwAAAAAAAAAXcGVybWl0LWFnZW50LWZvcndhcmRpbmcAAAAAAAAAFnBlcm1pdC1wb3J0LWZvcndhcmRpbmcAAAAAAAAACnBlcm1pdC1wdHkAAAAAAAAADnBlcm1pdC11c2VyLXJjAAAAAAAAAAAAAAEXAAAAB3NzaC1yc2EAAAADAQABAAABAQDWHxxYH2JXSa1WoS0pUgwLmaxXx8lldNL6RInowpwp+wmAbXuKR8ADPQmMdr7TzEexFMqojGNSVACPdhTLIYCrk2PSgqvbHIhwDAPsK4iujoTfsGQR9DojR0F00m5kzD/Bt0VcgNdQi5nnf9iXKfcuIEmmJEKUlsAuzWB2UtUMocFXpyMqDHxsBGT9DDWggSFHYtUeSo3zzbmUN9ecu3GEwqLDS0xf9EKAmgD7Ko7y9goJ6XmIqiL3RaUqmCZyrp760K5Ir++pl1RRG/6EPVPDjiMvyDPdz1n1Amv5kmCsDrYnaMNy+tmWmZa9cP98KJ+Zvc2i4LklIuo7nMl13qzPAAABFAAAAAxyc2Etc2hhMi0yNTYAAAEAzgFzU0S5YtyKOAR/lVvQwhBwjSUpl9kQ48B2cVQXoUTRbA9V9wf8n+sj9yiVxJm16upPCbDmGdgCpwFLsIZhXwvhbTHF1l57pb6N5yZXgcJhdOesneVy13gwODzeE+9CsCGriS0mlHiSmf9XFozJM+YI6g9maLOODnJYy+ZXXspI9rHcdtC7on3a1z6x/lI6HX4iXgSJHOr7PfVLWUpkMZy2TTer9vzkp8nHpWidBPj6mBgrCK51s7XTKnhYVXEw+rFhC/84X3Dius2rDqNBQ4Vo0iH8EAZ3xIkXSK6h+zglFIy9nRRdH9MPyvJac1EGm84XFWx8qql6yr6T51kbDg=="
)

type MockOp struct{}

func (m *MockOp) RequestTokens(cicHash string) ([]byte, error) {
	return nil, nil
}
func (m *MockOp) VerifyPKToken(pktJSON []byte, cosPk *ecdsa.PublicKey) (map[string]any, error) {
	return nil, nil
}
func (g *MockOp) PublicKey(idt []byte) (parties.PublicKey, error) {
	return nil, nil
}

func TestAuthorizedPrincipalsCommand(t *testing.T) {
	op := &MockOp{}

	principal, err := AuthorizedPrincipalsCommand(userArg, typeArg, certB64Arg, sshcert.AllowAllPolicyEnforcer, op)
	if err != nil {
		t.Error(err)
	}
	if principal != "e0" {
		t.Error(err)
	}
}
